{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAa,CACjBC,MAAO,KACPC,KAAM,KACNC,OAAQ,MA6BR,SAASC,EAAcC,EAAUJ,GAC/B,MAAMK,EAAgBC,KAAKC,SAAW,GAQlC,OAPY,IAAIC,SAAQ,CAACC,EAAKC,KAC5BL,EACJI,EAAI,C,SAACL,E,MAAUJ,IAEfU,EAAI,C,SAACN,E,MAAUJ,GAAO,G,CAjC5BJ,EAAOe,iBAAiB,UAKxB,SAAsBC,GACpBA,EAAIC,iBACJjB,EAAOkB,QACP,MAAMC,EAAehB,EAAWC,MAChC,IAAIgB,EAAkBjB,EAAWE,KACjC,MAAMgB,EAAalB,EAAWG,OAC5B,IAAK,IAAIgB,EAAI,EAAGA,EAAID,EAAYC,GAAG,EAAG,CACtC,IAAIC,EAAWD,EAAI,EACfE,EAAQL,EAAeC,EAAkBE,EAGjDG,YAAW,KACXlB,EAAcgB,EAAUC,GACvBE,MAAK,EAAClB,SAAEA,EAAQJ,MAAEA,MACTN,EAAA6B,OAAOC,QAAQ,uBAAqBpB,QAAiBJ,MAAU,IAExEyB,OAAM,EAACrB,SAAEA,EAAQJ,MAAEA,MACVN,EAAA6B,OAAOG,QAAQ,sBAAoBtB,QAAeJ,MAAU,GAC5D,GACFe,EAAeC,EAAkBE,E,KAvBzCtB,EAAOe,iBAAiB,SACxB,SAAuBC,GACrBb,EAAWa,EAAIe,OAAOC,MAAQC,OAAOjB,EAAIe,OAAOG,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst formEl = document.querySelector('.form');\nconst formValues = {\n  delay: null,\n  step: null,\n  amount: null,\n}\nformEl.addEventListener('submit', startMassage);\nformEl.addEventListener('input', addFormValues);\nfunction addFormValues(evt) {\n  formValues[evt.target.name] = Number(evt.target.value);\n}\nfunction startMassage(evt) {\n  evt.preventDefault();\n  formEl.reset();\n  const firstTimeout = formValues.delay;\n  let intervalTimeout = formValues.step;\n  const amountStep = formValues.amount;\n    for (let i = 0; i < amountStep; i+=1) {\n    let position = i + 1;\n    let delay = firstTimeout + intervalTimeout * i;\n  \n  \nsetTimeout(() => {\ncreatePromise(position, delay)\n.then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n.catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n     }, firstTimeout + intervalTimeout * i);\n  }\n}\n  function createPromise(position, delay) { \n    const shouldResolve = Math.random() > 0.3;\n    const promise = new Promise((res, rej) => {\n      if (shouldResolve) {\n      res({position, delay});\n    } else {\n      rej({position, delay});\n    }\n  });\n        return promise;\n  }"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$formValues","delay","step","amount","$47d4ff9957288465$var$createPromise","position","shouldResolve","Math","random","Promise","res","rej","addEventListener","evt","preventDefault","reset","firstTimeout","intervalTimeout","amountStep","i","position1","delay1","setTimeout","then","Notify","success","catch","failure","target","name","Number","value"],"version":3,"file":"03-promises.d08056cf.js.map"}